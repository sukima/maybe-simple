# Yet Another Maybe Monad

Designed as a simple drop in module. This monad includes support for deep
object properties lookup and ability to invoke functions on objects.

**But why?** Most Maybe monad libraries are full featured and heavy. They try
to mimic Haskel. And many work on values and not object properties. When
working in JS I find I often want a simple *optional* like construct which will
let me deal with objects that violate the Law of Demeter (typically a nested
object from an API. I need a simple way to grab data deep down in a safe way
without having JS blowup with undefined problems. Rails has a `try`, Swift has
optionals, CoffeeScript has a `?` guard, but JS has *nothing* (pun intended).

## Install

#### NPM

```console
$ npm install --save maybe-simple
```

#### Yarn

```console
$ yarn add maybe-simple
```

#### Usage

```js
var Maybe = require('maybe-simple');
```

{{>main}}

## License

```
Copyright (c) 2017 Devin Weaver

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
